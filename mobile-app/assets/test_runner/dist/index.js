(()=>{"use strict";const t=(t="/dist/")=>{const e=t.startsWith("/"),s=t.endsWith("/");return e||(t="/"+t),s||(t+="/"),t};class e{#t;#e;#s({assetPath:e,script:s}){const r=document.createElement("iframe");return r.sandbox.add("allow-scripts","allow-forms"),r.allow="autoplay",r.id="test-frame",(t=>{t.style.position="absolute",t.style.left="-9999px",t.style.top="-9999px",t.style.visibility="hidden"})(r),{iframe:r,scriptHTML:`<script id='test-evaluator-script' src='${t(e)+s}'><\/script>`}}constructor(t){const{scriptHTML:e,iframe:s}=this.#s(t);this.#t=s,this.#e=e}async init(t){const{hooks:e}=t,s=e?.beforeAll?`<script id='test-evaluator-hooks'>\n${e.beforeAll}\n<\/script>`:"",r=new Promise((t=>{const e=()=>{this.#t.removeEventListener("load",e),t(!0)};this.#t.addEventListener("load",e)}));this.#t.srcdoc=`\n${this.#e}\n${s}\n${t.source}`,document.body.appendChild(this.#t),await r;const a=new Promise((t=>{const e=s=>{"null"===s.origin&&s.source===this.#t.contentWindow&&"ready"===s.data.type&&(window.removeEventListener("message",e),t(!0))};window.addEventListener("message",e)})),n={type:"init",value:t};this.#t.contentWindow?.postMessage(n,"*"),await a}runTest(t){const e=new Promise((t=>{const e=s=>{"null"===s.origin&&s.source===this.#t.contentWindow&&(window.removeEventListener("message",e),t(s.data.value))};window.addEventListener("message",e)})),s={type:"test",value:t};return this.#t.contentWindow?.postMessage(s,"*"),e}dispose(){this.#t.remove()}}class s{#t;#r=null;#a="";#s({assetPath:e,script:s}){return this.#a=t(e)+s,new Worker(this.#a)}constructor(t){this.#t=this.#s(t)}async init(t){this.#r=t;const e=new Promise((t=>{const e=s=>{"ready"===s.data.type&&(this.#t.removeEventListener("message",e),t(!0))};this.#t.addEventListener("message",e)})),s={type:"init",value:t};this.#t.postMessage(s),await e}async#n(){if(!this.#r||!this.#a)throw new Error("WorkerTestRunner not initialized");this.#t=new Worker(this.#a),await this.init(this.#r)}async runTest(t,e=5e3){let s;const r=new Promise((t=>{s=setTimeout((()=>{this.dispose(),this.#n().then((()=>{t({err:{message:"Test timed out"}})}))}),e)})),a=new Promise((t=>{const e=s=>{this.#t.removeEventListener("message",e),t(s.data.value)};this.#t.addEventListener("message",e)})),n={type:"test",value:t};this.#t.postMessage(n);try{return await Promise.race([a,r])}finally{clearTimeout(s)}}dispose(){this.#t.terminate()}}window.FCCSandbox=new class{#i;#o;#c;constructor(){this.#i=null,this.#o=null,this.#c=null}getRunner(t){switch(t){case"dom":return this.#i;case"javascript":return this.#o;case"python":return this.#c}}async createTestRunner({source:t,type:r,code:a,assetPath:n,hooks:i,loadEnzyme:o}){let c=null;switch(r){case"dom":this.#i||(this.#i=new e({assetPath:n,script:"dom-test-evaluator.js"})),c=this.#i;break;case"javascript":this.#o||(this.#o=new s({assetPath:n,script:"javascript-test-evaluator.js"})),c=this.#o;break;case"python":this.#c||(this.#c=new s({assetPath:n,script:"python-test-evaluator.js"})),c=this.#c}return await c.init({code:a,source:t,loadEnzyme:o,hooks:i}),c}}})();