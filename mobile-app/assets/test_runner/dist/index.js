(()=>{"use strict";function t({messenger:t,message:e}){return new Promise((s=>{const r=new MessageChannel;r.port1.onmessage=t=>{r.port1.close(),s(t.data)},t.postMessage(e,{targetOrigin:"*",transfer:[r.port2]})}))}const e=(t="/dist/")=>{const e=t.startsWith("/"),s=t.endsWith("/");return e||(t="/"+t),s||(t+="/"),t};class s{#t;#e;#s;#r({assetPath:t,script:s}){const r=document.createElement("iframe");return r.sandbox.add("allow-scripts","allow-forms"),r.allow="autoplay",r.id="test-frame",(t=>{t.style.position="absolute",t.style.left="-9999px",t.style.top="-9999px",t.style.visibility="hidden"})(r),{iframe:r,scriptHTML:`<script id='test-evaluator-script' src='${e(t)+s}'><\/script>`}}constructor(t){const{scriptHTML:e,iframe:s}=this.#r(t);this.#t=s,this.#e=e}async init(e,s){const{hooks:r}=e,a=r?.beforeAll?`<script id='test-evaluator-hooks'>\n${r.beforeAll}\n<\/script>`:"";this.#s=r?.afterAll;const n=new Promise(((t,e)=>{const r=setTimeout((()=>e(Error("Timed out waiting for the test frame to load"))),s),a=()=>{this.#t.removeEventListener("load",a),clearTimeout(r),t(!0)};this.#t.addEventListener("load",a)}));this.#t.srcdoc=`\n${this.#e}\n${a}\n${e.source}`,document.body.appendChild(this.#t),await n;const i={type:"init",value:e};await t({messenger:this.#t.contentWindow,message:i})}runTest(e){return t({messenger:this.#t.contentWindow,message:{type:"test",value:e}}).then((({value:t})=>t))}async#a(e){const s={type:"code",value:e};return t({messenger:this.#t.contentWindow,message:s})}async runAllTests(t){const e=[];for(const s of t){const t=await this.runTest(s);e.push(t)}return this.#s&&await this.#a(this.#s),e}dispose(){this.#t.remove()}}class r{#t;#n=null;#i;#o="";#r({assetPath:t,script:s}){return this.#o=e(t)+s,new Worker(this.#o)}constructor(t){this.#t=this.#r(t)}async init(e,s){this.#n=e,this.#i=s;const r={type:"init",value:e};let a;const n=new Promise(((t,e)=>{a=setTimeout((()=>e(new Error("Timed out waiting for the test worker to initialize"))),s)})),i=t({messenger:this.#t,message:r});await Promise.race([i,n]),clearTimeout(a)}async#u(){if(!this.#n||!this.#o)throw new Error("WorkerTestRunner not initialized");this.#t=new Worker(this.#o),await this.init(this.#n,this.#i)}async#a(e){const s={type:"code",value:e};return t({messenger:this.#t,message:s})}async runTest(e,s=5e3){let r;const a=new Promise((t=>{r=setTimeout((()=>{this.dispose(),this.#u().then((()=>{t({err:{message:"Test timed out"}})}))}),s)})),n={type:"test",value:e},i=t({messenger:this.#t,message:n}).then((({value:t})=>t));try{return await Promise.race([i,a])}finally{clearTimeout(r)}}async runAllTests(t,e=5e3){const s=[];for(const r of t){const t=await this.runTest(r,e);s.push(t)}return this.#n?.hooks?.afterAll&&await this.#a(this.#n.hooks.afterAll),s}dispose(){this.#t.terminate()}}window.FCCTestRunner=new class{#l;#c;#h;constructor(){this.#l=null,this.#c=null,this.#h=null}getRunner(t){switch(t){case"dom":return this.#l;case"javascript":return this.#c;case"python":return this.#h}}async createTestRunner({source:t,type:e,code:a,assetPath:n,hooks:i,loadEnzyme:o},{timeout:u}={timeout:2e4}){let l=null;switch(e){case"dom":this.#l||=new s({assetPath:n,script:"dom-test-evaluator.js"}),l=this.#l;break;case"javascript":this.#c||=new r({assetPath:n,script:"javascript-test-evaluator.js"}),l=this.#c;break;case"python":this.#h||=new r({assetPath:n,script:"python-test-evaluator.js"}),l=this.#h}return await l.init({code:a,source:t,loadEnzyme:o,hooks:i},u),l}}})();